// prisma/schema.prisma
generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model SuperAdmin {
  id       String @id @default(uuid())
  userType String
  username String
  email    String @unique
  password String
}

model Admin {
  id       String @id @default(uuid())
  userType String
  username String
  email    String @unique
  password String
}

model Developer {
  id       String @id @default(uuid())
  userType String @default("developer")
  username String
  email    String @unique
  password String
}

model Company {
  id                String   @id @default(uuid())
  userType          String
  username          String
  email             String   @unique
  phoneNumber       String   
  additionalPhone   String
  password          String
  country           String   @default("")
  city              String   @default("")
  address           String   @default("")
  website           String?
  logo              String?
  docs              String?
  ratings           Rating[] 
  averageRating     Int      @default(0)
  totalRatings      Int      @default(0)
  approved          Boolean  @default(false)
  frozen            Boolean  @default(false)
  hidden            Boolean  @default(false)
  safras            Trip[]
  passengers        Passenger[]
}

model Customer {
  id            String   @id @default(uuid())
  userType      String
  username      String
  email         String   @unique
  gender        String
  password      String
  phoneNumber   String   @default("")
  day           String   @default("")
  month         String   @default("")
  year          String   @default("")
  country       String   @default("")
  city          String   @default("")
  address       String   @default("")
  safras        Trip[]
  ratings       Rating[] 
  passengers     Passenger[]
}

model Rating {
  id           String   @id @default(uuid())
  customer     Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  company      Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  customerId   String
  companyId    String
  rating       Int
  // review       String
}

model Programme {
  id        Int   @id @default(autoincrement())
  dayNum    Int
  program   String @db.Text 
  safra     Trip[] 
}

model Trip {
  id           String   @id @default(uuid())
  name         String
  desc         String @db.Text
  dateFrom     DateTime
  dateTo       DateTime
  companyId    String
  price        String
  company      Company? @relation(fields: [companyId], references: [id])
  customers    Customer[]
  type         String
  programme    Programme[]
  fromLocation String
  destination  String
  offer        String?     @db.Text
  tripImages   String
}

model Passenger {
  id             String @id @default(uuid())
  firstName      String
  middleName     String
  lastName       String
  passportNumber String
  email          String
  phoneNumber    String
  gender         String
  day            String
  month          String
  year           String
  nationality    String
  country        String @default("")
  city           String @default("")
  address        String @default("")
  tripId         String
  customerId     String?
  customer       Customer? @relation(fields: [customerId], references: [id])
  companyId      String?
  company        Company? @relation(fields: [companyId], references: [id])
}


model Image {
  id         String      @id @default(uuid())
  filename   String
  path       String
  size       Int
  mime_type  String
  image_type String
}